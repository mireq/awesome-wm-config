#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import argparse
import csv
import os
import scipy.signal
from collections import namedtuple
from datetime import datetime
from pathlib import Path

from dateutil.tz import tzlocal
import matplotlib.dates as mdates
import matplotlib.patches as patches
import matplotlib.pyplot as plt
import matplotlib.ticker
import matplotlib.transforms
import numpy as np


class CpuRecord(object):
	__slots__ = ['user', 'nice', 'system', 'idle', 'iowait', 'irq', 'softirq']

	def __init__(self, user, nice, system, idle, iowait, irq, softirq):
		self.user = user
		self.nice = nice
		self.system = system
		self.idle = idle
		self.iowait = iowait
		self.irq = irq
		self.softirq = softirq

	def __repr__(self):
		return f'{self.__class__.__name__}({self.user}, {self.nice}, {self.system}, {self.idle}, {self.iowait}, {self.irq}, {self.softirq})'

	@property
	def sum(self):
		return self.user + self.nice + self.system + self.idle + self.iowait + self.irq + self.softirq

	@property
	def load(self):
		count = self.sum
		if count == 0:
			return 0.0
		return (self.user + self.nice + self.system + self.iowait + self.irq + self.softirq) / count

	def __iter__(self):
		yield self.user
		yield self.nice
		yield self.system
		yield self.idle
		yield self.iowait
		yield self.irq
		yield self.softirq



class CpuList(object):
	def __init__(self, cpuline):
		if isinstance(cpuline, int):
			self.cpus = [CpuRecord(*[0 for __ in range(7)]) for __ in range(cpuline)]
		elif isinstance(cpuline, list):
			self.cpus = cpuline
		else:
			self.cpus = [CpuRecord(*(int(val) for val in rec.split(','))) for rec in cpuline.split()]

	def __repr__(self):
		return f'{self.__class__.__name__}({self.cpus})'

	def __sub__(self, other):
		if not isinstance(other, CpuList):
			raise ValueError("CpuList instance required")
		new_cpus = []
		for current, other in zip(self.cpus, other.cpus):
			new_cpus.append(CpuRecord(*(a - b for a, b in zip(current, other))))
		return CpuList(new_cpus)


class HistoryRecord(object):
	__slots__ = ['status', 'time', 'power', 'energy', 'voltage', 'cpuline', 'cpu']

	def __init__(self, status, time, power, energy, voltage, cpuline=''):
		self.status = status
		self.time = time
		self.power = power
		self.energy = energy
		self.voltage = voltage
		self.cpuline = cpuline
		if self.cpuline:
			self.cpu = CpuList(self.cpuline)
		else:
			self.cpu = None

	def __repr__(self):
		return f'{self.__class__.__name__}({self.status}, {self.time}, {self.power}, {self.energy}, {self.voltage}, {self.cpuline})'

	@property
	def has_cpu(self):
		return bool(self.cpuline)


def reversed_lines(fp):
	part = ''
	for block in reversed_blocks(fp):
		for c in reversed(block):
			if c == '\n' and part:
				yield part[::-1]
				part = ''
			part += c
	if part: yield part[::-1]


def reversed_blocks(fp, blocksize=4096):
	fp.seek(0, os.SEEK_END)
	here = fp.tell()
	while 0 < here:
		delta = min(blocksize, here)
		here -= delta
		fp.seek(here, os.SEEK_SET)
		yield fp.read(delta)


def read_history(selected_cycle):
	tz = tzlocal()
	cycle = 0
	last_time = None
	last_status = None
	last_cpu = None
	with open(Path.home() / '.battery_history', 'r') as fp:
		for row in csv.reader(reversed_lines(fp), delimiter=';'):
			if len(row) < 5:
				continue
			current_time = int(row[1])
			record = HistoryRecord(*([row[0]] + [datetime.fromtimestamp(current_time)] + [int(val) for val in row[2:5]] + row[5:]))
			if record.has_cpu:
				record_cpu = record.cpu
				if last_cpu is not None:
					record.cpu = last_cpu - record_cpu
				last_cpu = record_cpu
			if last_time is None or last_status != record.status or (last_time - current_time) > 100:
				cycle += 1
			if cycle > selected_cycle:
				break
			last_time = current_time
			last_status = record.status
			if cycle == selected_cycle:
				yield record


def polygon(ax, x1, y1, x2, y2, color):
	polygon = plt.Polygon([(x1,y1), (x2,y2), (x2,0), (x1,0)], color=color)
	ax.add_patch(polygon)


def gradient_plot(ax, x_data, y_data, cmap, cmap_start=0.0, cmap_end=1.0, darken=False):
	count = len(x_data)
	x_data = [mdates.date2num(d) for d in x_data]
	x_min = x_data[0]
	x_max = x_data[-1]
	cmap = plt.get_cmap(cmap)
	for n, (x, y) in enumerate(zip(x_data, y_data)):
		if n + 1 == count:
			break
		x_pos = (x - x_min) / (x_max - x_min)
		color = cmap(x_pos * (cmap_end - cmap_start) + cmap_start)
		if darken:
			color = tuple([color[0] / 3, color[1] / 3, color[2] / 3, 1.0])
		polygon(ax, x+0.000001, y, x_data[n+1], y_data[n+1], color=color)


def main():
	parser = argparse.ArgumentParser(description="Show battery history")
	parser.add_argument('--cycle', type=int, default=1, help="Charge / discharge cycle number")
	args = parser.parse_args()

	lines = list(read_history(args.cycle))[::-1]

	plt.style.use({
		'figure.facecolor': '#071326',
		'figure.edgecolor': '#071326',
		'savefig.facecolor': '#071326',
		'savefig.edgecolor': '#071326',
		'axes.facecolor': '#071326',
		'lines.color': 'white',
		'patch.edgecolor': 'white',
		'text.color': 'white',
		'axes.edgecolor': 'white',
		'axes.labelcolor': 'white',
		'xtick.color': 'white',
		'ytick.color': 'white',
		'grid.color': '#ffffff20',
		'font.size': 14,
	})
	fig = plt.figure()
	has_cpu = lines[0].has_cpu
	if has_cpu:
		power_ax = fig.add_subplot(11, 1, (1, 6))
		energy_ax = fig.add_subplot(11, 1, (7, 10))
		cpu_ax = fig.add_subplot(11, 1, (11, 11))
	else:
		power_ax = fig.add_subplot(5, 1, (1, 3))
		energy_ax = fig.add_subplot(5, 1, (4, 5))
		cpu_ax = None
	#fig, (power_ax, energy_ax) = plt.subplots(2, 1)
	fig.set_size_inches(16, 8)

	time_values = [line.time for line in lines]
	power_values = [line.power / 1000000 for line in lines]
	energy_values = [line.energy / 1000000 for line in lines]
	voltage_values = [line.voltage / 1000000 for line in lines]

	time_low = min(time_values)
	time_high = max(time_values)

	power_low, power_high = np.percentile([power_values], [2, 98])
	power_low = power_low * 0.96
	power_high = power_high * 1.04167

	energy_low, energy_high = np.percentile([energy_values], [0.1, 99.9])

	power_values = scipy.signal.savgol_filter(power_values, 7, 3)
	voltage_values = scipy.signal.savgol_filter(voltage_values, 5, 3)

	#power_ax.title.set_text("Power")
	#power_ax.yaxis.set_major_locator(matplotlib.ticker.MaxNLocator(prune='both'))
	gradient_plot(power_ax, time_values, power_values, "inferno", cmap_start=0.1)
	power_ax.plot(time_values, power_values, color="#ffffff80", linewidth=0.5)
	power_ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
	power_ax.set_xlim([time_low, time_high])
	power_ax.set_ylim([power_low, power_high])
	power_ax.get_xaxis().set_visible(False)
	power_ax.get_yaxis().set_visible(True)
	power_ax.spines['top'].set_visible(False)
	power_ax.spines['right'].set_visible(False)
	power_ax.spines['bottom'].set_visible(False)
	power_ax.spines['left'].set_visible(False)
	power_ax.tick_params(axis="y", width=0, direction="in", pad=-50)
	formatter = matplotlib.ticker.EngFormatter(unit='W')
	power_ax.yaxis.set_major_formatter(formatter)
	yticks = power_ax.get_yticks()
	for y0, y1 in zip(yticks[::2], yticks[1::2]):
		power_ax.axhspan(y0, y1, color='white', alpha=0.05)
	for y0, y1 in zip(yticks[1::2], yticks[2::2]):
		power_ax.axhspan(y0, y1, color='black', alpha=0.05)
	#plt.setp(power_ax.get_yticklabels()[0], visible=False)
	#plt.setp(power_ax.get_yticklabels()[-1], visible=False)

	power_ax2 = power_ax.twiny()
	power_ax2.set_xlim([time_low, time_high])
	power_ax2.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
	power_ax2.get_xaxis().set_visible(True)
	power_ax2.tick_params(axis="x", width=0, direction="in", pad=-20)
	power_ax2.spines['top'].set_visible(False)
	power_ax2.spines['right'].set_visible(False)
	power_ax2.spines['bottom'].set_visible(False)
	power_ax2.spines['left'].set_visible(False)
	plt.setp(power_ax2.get_xticklabels()[0], visible=False)


	#energy_ax.yaxis.set_major_locator(matplotlib.ticker.AutoLocator(prune='both'))
	#energy_ax.yaxis.get_major_locator().set_params(prune='both')
	gradient_plot(energy_ax, time_values, energy_values, "viridis", cmap_start=0.1, cmap_end=1.0, darken=True)
	energy_ax.plot(time_values, energy_values, color="#ffffff80", linewidth=0.5)
	energy_ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
	energy_ax.set_xlim([time_low, time_high])
	energy_ax.set_ylim([energy_low * 0.98, energy_high * 1.0204])
	energy_ax.get_xaxis().set_visible(False)
	energy_ax.get_yaxis().set_visible(True)
	energy_ax.spines['top'].set_visible(False)
	energy_ax.spines['right'].set_visible(False)
	energy_ax.spines['bottom'].set_visible(False)
	energy_ax.spines['left'].set_visible(False)
	energy_ax.tick_params(axis="y", width=0, direction="in", pad=-55)
	energy_ax.tick_params(axis="x", width=0, direction="in", pad=-15)
	formatter = matplotlib.ticker.EngFormatter(unit='Wh')
	energy_ax.yaxis.set_major_formatter(formatter)
	yticks = energy_ax.get_yticks()
	for y0, y1 in zip(yticks[::2], yticks[1::2]):
		energy_ax.axhspan(y0, y1, color='white', alpha=0.05)
	for y0, y1 in zip(yticks[1::2], yticks[2::2]):
		energy_ax.axhspan(y0, y1, color='black', alpha=0.05)
	#plt.setp(energy_ax.get_yticklabels()[0], visible=False)
	#plt.setp(energy_ax.get_yticklabels()[-1], visible=False)

	color = '#40a0ff'
	voltage_ax = energy_ax.twinx()
	voltage_ax.yaxis.set_major_locator(matplotlib.ticker.MaxNLocator(prune='both'))
	voltage_ax.spines['top'].set_visible(False)
	voltage_ax.spines['right'].set_visible(False)
	voltage_ax.spines['bottom'].set_visible(False)
	voltage_ax.spines['left'].set_visible(False)
	voltage_ax.tick_params(axis="y", width=0, direction="in", pad=-55)
	formatter = matplotlib.ticker.EngFormatter(unit='V')
	voltage_ax.yaxis.set_major_formatter(formatter)
	voltage_ax.plot(time_values, voltage_values, color=color, linewidth=0.5)
	voltage_ax.set_ylabel('V', color=color)
	voltage_ax.tick_params(axis='y', labelcolor=color)
	plt.setp(voltage_ax.get_yticklabels()[0], visible=False)
	plt.setp(voltage_ax.get_yticklabels()[-1], visible=False)
	for item in voltage_ax.get_yticklabels():
		item.set_fontsize(10)

	if cpu_ax is not None:
		cpu_ax.spines['top'].set_visible(False)
		cpu_ax.spines['right'].set_visible(False)
		cpu_ax.spines['bottom'].set_visible(False)
		cpu_ax.spines['left'].set_visible(False)
		cpu_array = np.zeros((len(lines[0].cpu.cpus), len(time_values)))
		for x, line in enumerate(lines):
			for y, cpu in enumerate(line.cpu.cpus):
				cpu_array[y,x] = cpu.load
		cpu_ax.pcolormesh(time_values, np.arange(len(lines[0].cpu.cpus)), cpu_array, cmap="inferno")

	plt.subplots_adjust(left=0, right=1, top=1, bottom=0, hspace=0)
	#plt.tight_layout()
	##fig.subplots_adjust(hspace=0.3)
	plt.show()


if __name__ == "__main__":
	main()
